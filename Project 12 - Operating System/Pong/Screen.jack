// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screenBaseAddress;
    static Array screen;
    static boolean currentColor;

    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {

        let screenBaseAddress = 16384;
        let screen = screenBaseAddress;
        do Screen.setColor(true);

        let twoToThe = Array.new(17);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        let twoToThe[16] = 0;
        
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        
        var int i, screenSize;
        
        let i = 0;
        let screenSize = 24575 - screenBaseAddress; // 8191
        
        while (i < screenSize) {
            let screen[i] = false;
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {

        var int address, value, mask, prevValue;

        let address = (y * 32) + (x / 16) + screenBaseAddress;

        // set the (x % 16)th bit of value to the current color
        let mask = twoToThe[x & 15];

        let prevValue = Memory.peek(address);
        
        if (currentColor) {
            let value = prevValue | mask;
        } else {
            let value = prevValue & ~mask;
        }
        
        do Memory.poke(address, value);
        
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {

        var int a, b, diff, dx, dy, holder;
        var boolean isDown;

        // Manage X1 > X2 => reverse coordinates
        if (x1 > x2) {
            let holder = x1;
            let x1 = x2;
            let x2 = holder;

            let holder = y1;
            let y1 = y2;
            let y2 = holder;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        // ||||||||||||||||||||| Vertical line
        
        if (dx = 0) {

            // Manage Y1 > Y2
            if (~(y2 > y1)) {
                let dy = -dy;
                let isDown = true;
            }

            while (b < dy) {
                let b = b + 1;
                if (isDown) {
                    do Screen.drawPixel(x1 + a, y1 - b);
                } else {
                    do Screen.drawPixel(x1 + a, y1 + b);
                }
            }

            return;
        }
        
        // --------------------- Horizontal line
        if (dy = 0) {

            while (a < dx) {
                let a = a + 1;
                do Screen.drawPixel(x1 + a, y1);
            }

            return;
        } 

        let a = 0;
        let b = 0;
        let diff = 0;

        // Manage Y1 > Y2
        if (~(y2 > y1)) {
            let dy = -dy;
            let isDown = true;
        }

        while ((a < dx) & (b < dy)) {
            
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }

            if (isDown) {
                do Screen.drawPixel(x1 + a, y1 - b);
            } else {
                do Screen.drawPixel(x1 + a, y1 + b);
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

        var int a, b, dx, dy;
        
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        let a = 0;
        while (a < dx) {

            let b = 0;
            while (b < dy) {
                do Screen.drawPixel(x1 + a, y1 + b);
                let b = b + 1;
            }

            let a = a + 1;

        }

        return;
    }


    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        
        var int a, dy;
        var int sqrtDist;
        
        let dy = -r;
        while (~(dy > r)) {
            
            let sqrtDist = Math.sqrt((r * r) - (dy * dy));

            let a = 0;
            while (~(a > (2 * sqrtDist))) {
                do Screen.drawPixel( (x - sqrtDist) + a, y + dy);
                let a = a + 1;
            }

            let dy = dy + 1;
        }
        return;
    
    }

}
